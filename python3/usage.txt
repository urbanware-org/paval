
USAGE (paval.py)

    Contents:

        1.  Available methods
          1.1  Method "compfile"
          1.2  Method "compstr"
          1.3  Method "intrange"
          1.4  Method "intvalue"
          1.5  Method "path"
          1.6  Method "string"
        2.  Usage example

    1. Available methods

        1.1 Method "compfile"

            Compare files to avoid that the same file is given multiple times
            or in different ways (e. g. different name but same content).

                compfile(path, name="", list_files=[])

            Parameters:

                path            = Path of the file to be compared with others.

                name            = The name of the parameter (e. g. "input
                                  file" (used when returning an error).

                list_files      = List of files to be compared with the one
                                  from the 'path' parameter.

        1.2 Method "compstr"

            Compare a string with a list of strings and check if it is an item
            of that list.

                compstr(string, name="", list_strings=[])

            Parameters:

                string          = String to be compared with others.

                name            = The name of the parameter (e. g. "input
                                  file" (used when returning an error).

                list_string     = List of strings to be compared with the one
                                  from the 'path' parameter.

        1.3 Method "intrange"

            Validate an integer range.

                intrange(value, name="", value_min=None, value_max=None,
                         zero=False)

            Parameters:

                value           = Integer input value.

                name            = The name of the parameter (e. g. "input
                                  file" (used when returning an error).

                value_min       = Minimum allowed integer value.

                value_max       = Maximum allowed integer value.

                zero            = Boolean value if the given value can be
                                  zero.

        1.4 Method "intvalue"

            Validate an integer range.

                intvalue(value, name="", positive=True, zero=False,
                         negative=False):

            Parameters:

                value           = Integer input value.

                name            = The name of the parameter (e. g. "input
                                  file" (used when returning an error).

                positive        = Boolean value if the given value must or can
                                  be positive.

                zero            = Boolean value if the given value can be
                                  zero.

                negative        = Boolean value if the given value must or can
                                  be negative.

        1.5 Method "path"

            Validate a path of a file or directory.

                 path(path, name="", is_file=False, exists=False)

            Parameters:

                path            = File system path to validate.

                name            = The name of the parameter (e. g. "input
                                  file" (used when returning an error).

                is_file         = Boolean value if the given path must be a
                                  file.

                exists          = Boolean value if the given path must exist.

        1.6 Method "string"

            Validate a string.

                string(string, name="", wildcards=False, invalid_chars=None)

            Parameters:

                string          = String to be validated.

                name            = The name of the parameter (e. g. "input
                                  file" (used when returning an error).

                wildcards       = Boolean value if the string can contain
                                  wildcards.

                invalid_chars   = List of characters which are not allowed in
                                  the given string.

    2. Usage example

        Below is a simple usage example for the PaVal module.

            import paval as pv

            def foobar(file_path, file_list, file_name, option, size, count):

                # Ensure that the file given by 'file_path' does not exist
                pv.path(file_path, "input file", True, False)

                # Check that the file from 'file_path' is neither identical
                # with'/tmp/foo' nor with '/tmp/bar'
                pv.compfile(file_path, "input file", ["/tmp/foo", "/tmp/bar"])

                # Ensure that the file name does not contain any wildcards and
                # also that it does not contain brackets or exlamation marks
                pv.string(file_path, "input file", False, ['(', ')', '!'])

                # Check if the string given by 'option' is either "print",
                # "read" or "write"
                pv.compstr(option, "option", ["print", "read", "write"])

                # Check if the value of 'size' is a postive integer between 1
                # and 4096
                pv.intrange(size, "buffer size", 1, 4096, False)

                # Finally, ensure that 'count' is either zero or a positive
                # integer
                pv.intvalue(count, "count", True, True, False)

